#name: CI/CD Pipeline For Machine Learning Backend
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v2
#
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.9'
#
#      - name: Install Dependencies
#        run: pip install -r requirements.txt
#
#      - name: Run Linting
#        run: |
#          # Run linting commands here (e.g., flake8, pylint)
#
#      - name: Run Tests
#        run: |
#          # Run test commands here (e.g., pytest)
#
#      - name: Security Scanning
#        run: |
#          # Run security scanning commands here (e.g., snyk)
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build, tag, and push image to DockerHub
#        env:
#          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#          IMAGE_NAME: app-machine-learning-be
#        run: |
#          docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME .
#          docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:latest
#
#      - name: Create .kube directory
#        run: mkdir -p "${HOME}/.kube"
#
#      - name: Decode and save KUBE_CONFIG
#        run: echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > "${HOME}/.kube/config"
#
#      - name: Display config file
#        run: cat "${HOME}/.kube/config"
#      - name: Deploy to K8s
#        run: |
#          kubectl apply -f manifest/deployment.yaml
#          kubectl apply -f manifest/service.yaml
#
#
#      - name: Force rollout
#        run: kubectl rollout restart deployment app-machine-learning-be
name: Deploy to Ubuntu Server

on:
  push:
    branches:
      - main  # Change to your main branch name if different

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: SSH into Ubuntu Server and execute commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /root/ml-be
            git pull https://${{secrets.PAT}}@github.com/ml-be.git main  # or specify your branch name
            systemctl restart ml_be  # Replace with your service name
